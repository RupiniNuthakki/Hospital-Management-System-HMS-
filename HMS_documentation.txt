Backend: Spring boot- Java 
Open java project in Eclipse ide
Database: MySQL

Repository, entity, controller, service

Open MySQL cmd line:  pwd is 3159
then create database using
create database hospital_management_system;

modify application.properties file

create enity, controller, repository packages and then create classes 
Entity- Patient
then doclogin entity package with tables appointments, medicines
Create repositories for all 
Create controllers for all then write post , get requests using repository object


Frontend:  Angular, Node, Bootstrap
open node js command prompt then check node and npm installed or not then, install angular by using command
npm install -g @angular/cli@17
then check version of angular by ng version

Now, open angular cli by ng version

now create front end folder and open in cmd then create angular project by command
ng new frontend_HMS --no-standalone

Open frontend_HMS folder in visual studio code

then run by command: ng serve

open server and make changes if needed in appcomponent.html

now install bootstrap in vscode by command:
npm install bootstrap --save

now add css cdn to index.html in head tag:
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

now create components in angular using :
1. admin dash component
ng g c admindash (for patient data)

Now to connect spring boot we create service by using:
ng g s patient  which creates patientservice.ts has injections -Dependency injections

insert HttpClientModule in app.module.ts

create class : ng g class patient
has patient variables

make sure CORS in spring by WebConfig.java in config package
or use @CrossOrigins annotation in PatientController

now you can see patients data in front end url:
http://localhost:4200/

adjust admindash html file for styling

2. appointment component
Now need to create appointment service
ng g c appointment
ng g s appointment
ng g class appointment

declare variables in appointment.ts, then connect backend and method in appointment.service.ts, then call method on appointment.component.ts 
now edit appointment.component.html file for view

now after changes, http://localhost:4200/admin is for admin dashboard
http://localhost:4200/appointments- for appointments

3. create-appointment component
ng g c create-appointment

Adding appointment in front end getting CORS issue.

4. Deleting appointment 
Add deletemapping in java file and checked with postman

delete worked successfully in frontend too.

5.Deleted patient in both frontend(/admin) and backend

6.Create home component:
ng g c home
and redirect any default to home page route

7. create docdash component
ng g c docdash
doctor dashboard done with logout button, add patients and view medicines

8. Create create-patient component
ng g c create-patient
Created patient adding but same as appointments CORS issue

9.Create medicinelist component
ng g c medicinelist
ng g s medicine
ng g class medicine
ng g c create-medicine

10. Using PutMapping on patients (Backend)
that is updating the patients list and also check it using postman

11.Created update-patient-component 
successfully updating and deleting patient in frontend

12. Add View button in docdash and create view-patient component:
ng g c view-patient
so viewed patients by using view buttonin frontend

13. Now Get and Put mapping for medicine in backend by modify MedicineController.java
Checked in postman- successful

14.Updating medicine in frontend
ng g c update-medicine
Deleting medicine in backend by @DeleteMapping

15. Create doclogin and adlogin components in home page
ng g c doclogin
create service ng g s docauth
ng g c adlogin
create service ng g s adminauth

Doctor logins:  username=rupini, pwd=1234
Admin logins: username=admin, pwd=ad1234

ng g s adminauthguard

ng g s docauthguard

Done project

Now building the front end and backend

created jar file in spring by mvn clean install
then check whether jar file is running or not using

C:\Users\rupin\Desktop\HMS\Hospital Management System\Hospital-Management-System>java -jar target/Hospital-Management-System-0.0.1-SNAPSHOT.jar

Building -done
Testing(postman)-done

->Now Containerization
Create Docker files for both front end and backend
Now build Docker images for both
open docker desktop app and now in cmd go to backend directory then 
docker build -t hospital-management-backend .
docker run -p 8080:8080 hospital-management-backend

docker build -t hospital-management-frontend .
docker run -p 80:80 hospital-management-frontend



